<DOCTYPE! html>
<html>
<head>
  <meta name="viewport" content="width=device-width">
  <meta charset="utf-8">

  <title>Asset Ownership Tracking on the Ethereum Blockchain</title>
  <meta name="description" content="Assetic allows anyone to register physical assets under their ownership on the blockchain, allowing for verification and ownership transfer via smart contracts.">

  <!-- <link rel="stylesheet" type="text/css" src="../css/style.css"> -->

  // Provide Web3 framework
  <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js"></script>
  // Provide jQuery framework
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>


</head>

<style>

body {
  color: #222;
  font-family: Calibri, Arial;
  font-size: 0;
  margin: 0;
  background-color: #F9F9F9;
}

.nav {
  padding: 20px 40px;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  border-bottom: 0.5px solid lightgrey;
}

.nav div {
  display: inline-block;
  vertical-align: middle;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.nav .logo {
  width: 15%;
  font-size: 1.8rem;
  letter-spacing: 5px;
  font-weight: 600;
}

.nav .search {
  width: 50%;
}

.nav .search #search {
  width: 80%;
  margin-right: 1%;
  padding: 10px;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  letter-spacing: 0.8px;
}

.nav .search #submit {
  padding: 10px;
  background-color: #008BF8;
  border: 2px solid #008BF8;
  color: #fff;
  font-weight: 400;
  letter-spacing: 0.8px;
  border-radius: 2px;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

#submit:hover {
  cursor: pointer;
  cursor: hand;
  opacity: 0.8;
}

.nav .buttons {
  width: 35%;
  text-align: right;
}

.nav .buttons ul {
  list-style: none;
}

.nav .buttons ul li {
  display: inline-block;
  padding: 0 5%;
  color: #333;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  font-size: 1rem;
}

.nav .buttons ul a:hover li {
  color: #29CE9A
}

#signup {
  padding: 10px;
  background-color: #008BF8;
  border: 2px solid #008BF8;
  color: #fff;
  font-weight: 600;
  letter-spacing: 0.8px;
  border-radius: 2px;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

#signup:hover {
  cursor: pointer;
  cursor: hand;
  opacity: 0.8;
}

/* Home */
.home {
  font-family: Arial;
  text-align: center;
}

.centerblock {
  width: 40%;
  margin: 80px auto;
  text-align: center;
}

h1 {
  font-size: 3.3rem;
}

.centerblock p {
  width: 90%;
  margin: auto;
  font-size: 1.1rem;
  color: #666;
  line-height: 30px;
}

.register {
  font-size: 1.2rem;
  margin-top: 50px;
  display: inline-block;
  padding: 10px 20px;
  border-bottom: 100% solid #008BF8;
  color: #fff;
  font-weight: 300;
  letter-spacing: 0.8px;
  border-radius: 2px;
  -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  position: relative;
  transition: 0.4s;
}

.filler {
  background-color: #008BF8;
  width: 100%;
  height: 100%;
  position: absolute;
  z-index: -999;
  left: 0;
  bottom: 0;
  transition: 0.4s;
}

.register:hover {
  color: #008BF8;
  transition: 0.4s;
}

.register:hover .filler {
  height: 3px;
  bottom: 0;
  transition: 0.4s;
}

.disclaimer {
  border: 0.5px solid red;
  background-color: #fff;
  font-size: 0.9rem;
  padding: 10px 20px;
  line-height: 25px;
  margin-top: 70px;
}

</style>


<body>

<div class="container">
  <div class="nav">
    <a style="color: #222;" href="/"><div class="logo">
      assetic
    </div></a>
    <div class="search">
      <form>
        <input type="text" name="search" id="search" placeholder="Search for an owner (e.g. 0x35b7...) or an ItemId (e.g. 345)">
        <input type="submit" name="submit" value="Find" id="submit">
      </form>
    </div>
    <div class="buttons">
      <ul>
        <a href="#"><li>How does it work</li></a>
        <a href="#"><li>About</li></a>
        <a href="#"><li><u>Log In</u></li></a>
        <a href="#"><li id="signup">SIGN UP</li></a>
      </ul>
    </div>
  </div>
  
  <div class="home">
    
    <div class="centerblock">
      <h1>Register any asset with your ownership</h1>
      <p>Assetic allows you to register any physical asset on the Ethereum blockchain by providing an identification of the asset together with a description. A digital token which will represent the asset can now be tracked and transfered between any two persons all over the world.</p>
      <a href="/register/"><div class="register">Register my asset<div class="filler"></div></div></a>
       <div class="disclaimer">
        It is very important that you <a href="#">read this</a> before using this decentralized application. Using this product means you have agreed to these terms.
      </div>
    </div>
    
  </div>

</div>

</body>

<script>

// Connect to Ethereum Network/Blockchain

if (typeof web3 !== 'undefined') {
  web3 = new Web3(web3.currentProvider);
  console.log('We already have a provider.');
} else {
  web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545")); 
  console.log('We have set a new provider on Ganache chain at localhost:8454');
}

// Set Account
web3.eth.defaultAccount = web3.eth.accounts[0];
console.log('Default account: ' + web3.eth.defaultAccount);

// Provide ABI to smart contract
const assetTrackerContracts = web3.eth.contract([
  {
    "constant": false,
    "inputs": [
      {
        "name": "_approved",
        "type": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "burnItem",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "buyItem",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      },
      {
        "name": "_price",
        "type": "uint256"
      }
    ],
    "name": "putOnSale",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_identifier",
        "type": "string"
      },
      {
        "name": "_code",
        "type": "string"
      },
      {
        "name": "_description",
        "type": "string"
      }
    ],
    "name": "registerItem",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "safeTransferFrom",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_operator",
        "type": "address"
      },
      {
        "name": "_approved",
        "type": "bool"
      }
    ],
    "name": "setApprovalForAll",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      },
      {
        "name": "_reservedBuyer",
        "type": "address"
      }
    ],
    "name": "setReserved",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_from",
        "type": "address"
      },
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_tokenId",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "_identifier",
        "type": "string"
      },
      {
        "indexed": true,
        "name": "_code",
        "type": "string"
      }
    ],
    "name": "ItemRegistered",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_to",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_approved",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_owner",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "_operator",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_approved",
        "type": "bool"
      }
    ],
    "name": "ApprovalForAll",
    "type": "event"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_identifier",
        "type": "string"
      },
      {
        "name": "_code",
        "type": "string"
      }
    ],
    "name": "doesItemExist",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "getApproved",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "getItemByToken",
    "outputs": [
      {
        "name": "identifier",
        "type": "string"
      },
      {
        "name": "code",
        "type": "string"
      },
      {
        "name": "description",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "getReserved",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      },
      {
        "name": "_operator",
        "type": "address"
      }
    ],
    "name": "isApprovedForAll",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "isOnSale",
    "outputs": [
      {
        "name": "_onSale",
        "type": "bool"
      },
      {
        "name": "_price",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256"
      }
    ],
    "name": "ownerOf",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  }
]);

// Connect to smart contract
const assetTracker = assetTrackerContract.at('0xfd33e0c055eab7bfce118e9188ae03f9ab48833c');


/* ================================================================================================================================================
=========== Starting actual functionality =========================================================================================================
================================================================================================================================================ */

// Ability to register an item
assetTracker.registerItem(_identifier, _code, _description, function(error, result) {
  if (error) {
    console.log(error);
  } else {
    console.log('Succesfully registered item. It will take some time before the transaction is executed. One moment please...');
  }
})


// Watching for register event
assetTracker.ItemRegistered().watch(function(error, result) {
  if(!error) {
    // Code when there is no error (use --> _tokenId, _identifier, _code)
  } else {
    // Code when there is an error.
  }
})

// Putting an item on sale
assetTracker.putOnSale(_tokenId, _price, function(error, result) {
  if (error) {
    console.log(error);
  } else {
    console.log('Item will be put on sale soon.')
  }
})

// Get item info by tokenId
assetTracker.getItemByToken(_tokenId, function(error, result) {
  if (error) {
    console.log(error);
  } else {
    console.log(result);
  }
})

// Set reserved address 
assetTracker.setReserved(_tokenId, _reservedBuyer, function(error, result) {
  if(error) {
    console.log(error);
  } else {
    console.log(result);
  }
})

// Buy an item
assetTracker.buyItem(_tokenId, {'value': _value}, function(error, result) {
  if(error) {
    console.log(error);
  } else {
    console.log(result);
  }
})

// Watch for transfer event 
assetTracker.Transfer().watch(function(error, result) {
  if(error) {
    console.log(error);
  } else {
    console.log(result);
  }
})


// Burn an item

assetTracker.burnItem(_tokenId, function(error, result) {
  if(error) {
    console.log(error);
  } else {
    console.log(result);
  }
})

</script>